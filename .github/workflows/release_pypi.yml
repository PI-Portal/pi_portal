---
name: pi_portal-release-pypi

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)
# PYPI_API_TOKEN             (Required, for publishing wheels to production pypi...)
# TEST_PYPI_API_TOKEN        (Required, for publishing wheels to test-pypi...)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      BRANCH_OR_TAG:
        description: 'Branch or Tag to build and push'
        required: true
        default: ''
      SELECTED_PYPI_REPOSITORY:
        description: 'Set to "test" or "production" to select a PyPi Repository'
        required: true
        default: 'test'

env:
  PROJECT_NAME: "pi_portal"
  SELECTED_PYPI_REPOSITORY: "test"
  USERNAME: "pi-portal"

jobs:
  release:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        include:
          - python-version: 3.7

    steps:
      - name: Publish to PyPi -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Publish to PyPi -- Code Checkout (Dispatch)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.BRANCH_OR_TAG  }}

      - name: Publish to PyPi -- Setup Environment (Dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          PYTHON_VERSION: ${{ matrix.python-version }}
          SELECTED_PYPI_REPOSITORY: ${{ github.event.inputs.SELECTED_PYPI_REPOSITORY }}

      - name: Publish to PyPi -- Code Checkout (Automated Release)
        if: github.event_name != 'workflow_dispatch'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Publish to PyPi -- Setup Environment (Automated Release)
        if: github.event_name != 'workflow_dispatch'
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          PYTHON_VERSION: ${{ matrix.python-version }}

      - name: Publish to PyPi -- Create Docker Mounted Content
        run: |
          echo | ssh-keygen
          touch ${HOME}/.gitconfig
          touch ${HOME}/.gitconfig_global

      - name: Publish to PyPi -- Ensure File System is Writable by the Container
        run: |
          sudo chmod -R o+w .

      - name: Publish to PyPi -- Build Container
        run: |
          source .github/scripts/build_container.sh

      # START Continuous Deployment -- Customize this Section Depending on your strategy

      - name: Publish to PyPi -- Build and Publish a Python Package
        run: |
          source .github/scripts/release_pypi.sh
        env:
          TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

      # END Continuous Deployment -- Customize this Section Depending on your strategy

      - name: Publish to PyPi -- Report Success (CD is enabled) (Test PyPi)
        if: env.CD_USE_TEST == 'true'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: new release has been pushed to Test PyPi!"

      - name: Publish to PyPi -- Report Success (CD is enabled)
        if: env.CD_USE_PRODUCTION == 'true'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: new release has been pushed to PyPi!"

      - name: Publish to PyPi -- Report Success (CD is not enabled)
        if: env.CD_USE_PRODUCTION != 'true' && env.CD_USE_TEST != 'true'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" "new release wheel has been built, but CD is disabled for this repository!"

      - name: Publish to PyPi -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated PyPi release has failed!"
