---
name: pi_portal-release-container

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)
# DOCKER_USERNAME            (Optional, required for image pushing...)
# DOCKER_TOKEN               (Optional, required for image pushing...)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      BRANCH_OR_TAG:
        description: 'Branch or Tag'
        required: true
        default: ''

env:
  PROJECT_NAME: "pi_portal"
  USERNAME: "niall-byrne"

jobs:
  release:

    runs-on: ubuntu-latest


    steps:
      - name: Publish Container -- Code Checkout (Dispatch)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.BRANCH_OR_TAG  }}

      - name: Publish Container -- Checkout (Automated Release)
        if: github.event_name != 'workflow_dispatch'
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Publish Container -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Publish Container -- Create Docker Mounted Content
        run: |
          echo | ssh-keygen
          touch ${HOME}/.gitconfig
          touch ${HOME}/.gitconfig_global

      - name: Publish Container -- Ensure File System is Writable by the Container
        run: |
          sudo chmod -R o+w .

      - name: Publish Container -- Construct Image Tag
        run: |
          echo "IMAGE_NAME=${DOCKER_USERNAME}/${PROJECT_NAME}:${BRANCH_OR_TAG}" >> $GITHUB_ENV

      # START Continuous Deployment -- Customize this Section Depending on your strategy

      - name: Publish Container -- Is CD enabled?
        if: env.DOCKER_USERNAME != ''
        run: |
          source .github/scripts/release_docker.sh
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

      - name: Publish Container -- Configure Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Note: This is configured for dockerhub, but this action is highly customizable
      # https://github.com/docker/login-action
      - name: Publish Container -- Login to DockerHub
        if: env.CD_DOCKER_REPO_ENABLED == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Note: This is configured for dockerhub, but this action is highly customizable
      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Publish Container -- Build and Push
        if: env.CD_DOCKER_REPO_ENABLED == 'true'
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./assets/Dockerfile
          push: true
          target: production
          tags: |
            ${{ env.IMAGE_NAME }}

      # END Continuous Deployment -- Customize this Section Depending on your strategy

      - name: Publish Container -- Report Success (CD is enabled)
        if: env.CD_DOCKER_REPO_ENABLED == 'true'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: new docker image has been built and pushed!"

      - name: Publish Container -- Report Success (CD is not enabled)
        if: env.CD_DOCKER_REPO_ENABLED == 'false'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" "new docker image has been built, but CD is disabled for this repository!"

      - name: Publish Container -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated docker image build has failed!"
