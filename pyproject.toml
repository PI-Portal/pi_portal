[build-system]
build-backend = 'poetry.core.masonry.api'
requires = ['poetry-core>=1.0.0']

[tool]
[tool.bandit]
skips = ['B101']

[tool.commitizen]
bump_message = 'bump(RELEASE): $current_version â†’ $new_version'
pre_bump_hooks = ['.cicd-tools/boxes/bootstrap/commitizen/pre_bump.sh']
version = '1.0.0'
version_files = ['pyproject.toml:version']
version_provider = 'poetry'

[tool.coverage]
[tool.coverage.report]
exclude_lines = ['no cover']
fail_under = 100
ignore_errors = true
precision = 1
show_missing = true

[tool.coverage.run]
branch = true
omit = ['*/test*', 'setup.py', 'pi_portal/__main__.py', 'pi_portal/modules/python/*.py']
source = ['.']

[tool.isort]
default_section = 'FIRSTPARTY'
include_trailing_comma = true
indent = '    '
length_sort = false
line_length = 80
multi_line_output = 3
no_lines_before = 'LOCALFOLDER'
sections = 'FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER'
skip_glob = '*_pb2.py'

[tool.mypy]
exclude = '^pi_portal\/modules\/python\/.+\.py$'
ignore_missing_imports = false
mypy_path = 'pi_portal/stubs'

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ['fake_rpi.*', 'jsonschema.*', 'RPi.*']

[tool.poetry]
authors = ['Niall Byrne <niall@niallbyrne.ca>']
description = 'Raspberry PI Door Logger'
documentation = 'https://github.com/pi-portal/pi_portal/README.md'
exclude = ['**/tests/*', '**/*.sh']
homepage = 'https://github.com/pi-portal/pi_portal'
include = ['pi_portal/bin/*', 'pi_portal/installation/**/*']
keywords = []
license = 'MPL-2.0'
name = 'pi_portal'
readme = 'README.md'
repository = 'https://github.com/pi-portal/pi_portal'
version = '1.0.0'

[tool.poetry.dependencies]
Cython = '<3'
boto3 = '^1.33.12'
click = '^8.1.7'
defusedxml = '^0.7.1'
fake-rpi = '^0.7.1'
fastapi = '^0.109.0'
humanize = '^4.0.0'
jinja2 = '^3.1.2'
jsonschema = '>=3.2.0,<4.0.0'
persist-queue = '^0.8.1'
python = '^3.8'
python-json-logger = '<2.0.3'
requests = '^2.31.0'
slack-bolt = '^1.18.1'
slack-sdk = '^3.26.0'
sqlitedict = '^2.1.0'

[tool.poetry.dependencies.'RPi.GPIO']
platform = 'linux'
version = '^0.7.1'

[tool.poetry.dependencies.adafruit-circuitpython-dht]
platform = 'linux'
version = '^4.0.1'

[tool.poetry.dependencies.uvicorn]
extras = ['standard']
version = '^0.26.0'

[tool.poetry.group]
[tool.poetry.group.dev]
[tool.poetry.group.dev.dependencies]
commitizen = '^3.0.0'
coverage = '^7.0.0'
freezegun = '^1.2.0'
httpx = '^0.26.0'
mypy = '^1.7.1'
pylint = '^2.0.0'
pytest = '^7.2.0'
pytest-pylint = '<0.19.0'
safety = '^2.3.1'
types-boto3 = '^1.0.2'
types-freezegun = '^1.1.10'
types-requests = '^2.31.0'
types-setuptools = '^69.0.0.0'
wheel = '^0.42.0'

[tool.poetry.group.dev.dependencies.pre-commit-dind]
git = 'https://github.com/cicd-tools-org/pre-commit-dind'

[tool.poetry.group.docs]
[tool.poetry.group.docs.dependencies]
myst-parser = '^2.0.0'
sphinx = '^7.0.0'
sphinx-click = '^5.1.0'
sphinx-jsonschema = '^1.19.1'
sphinx_rtd_theme = '^2.0.0'

[[tool.poetry.packages]]
include = 'pi_portal'

[tool.poetry.scripts]
pi_portal = 'pi_portal.cli:cli'

[tool.pylint]
[tool.pylint.basic]
argument-rgx = '[a-z_][a-z0-9_]{1,40}$'
attr-rgx = '(^[a-z_][a-z0-9_]{1,30})$'
bad-names = 'foo,bar,baz,toto,tutu,tata'
class-attribute-rgx = '([A-Za-z_][A-Za-z0-9_]{1,50}|(__.{2,30}__))$'
class-rgx = '[A-Z_][a-zA-Z0-9]+$'
const-rgx = '(([A-Z_][A-Z0-9_]*)|(__.*__))$|^(ReturnType|ApiEnabled)$'
docstring-min-length = '-1'
function-rgx = '[A-Za-z_][A-Za-z0-9_]{1,50}$'
good-names = 'i,j,k,ex,Run,_'
inlinevar-rgx = '[A-Za-z_][A-Za-z0-9_]*$'
method-rgx = '^[A-Za-z_][A-Za-z0-9_]{2,40}$|^test_[A-Za-z0-9_]{2,70}$'
module-rgx = '(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$'
no-docstring-rgx = '.*'
variable-rgx = '^[a-z_][a-z0-9_]{1,30}$'

[tool.pylint.classes]
defining-attr-methods = '__init__,__new__,setUp'
valid-classmethod-first-arg = 'cls'
valid-metaclass-classmethod-first-arg = 'mcs'

[tool.pylint.design]
max-args = 6
max-attributes = 8
max-branches = 12
max-locals = 15
max-parents = 10
max-public-methods = 200
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.exceptions]
overgeneral-exceptions = 'builtins.Exception'

[tool.pylint.format]
ignore-long-lines = '^\s*(# )?<?https?://\S+>?$'
indent-string = '  '
max-line-length = 80
max-module-lines = 1000
single-line-if-stmt = 'no'

[tool.pylint.imports]
deprecated-modules = 'regsub,TERMIOS,Bastion,rexec'
ext-import-graph = ''
import-graph = ''
int-import-graph = ''

[tool.pylint.master]
ignore = ''
ignore-patterns = '.*_pb2.py'
load-plugins = ''
persistent = 'yes'

[tool.pylint.message_control]
disable = 'locally-disabled,fixme,too-few-public-methods,C0411,E1101'

[tool.pylint.miscellaneous]
notes = 'FIXME,XXX,TODO'

[tool.pylint.reports]
evaluation = '10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)'
output-format = 'text'
reports = 'no'

[tool.pylint.similarities]
ignore-comments = 'yes'
ignore-docstrings = 'no'
ignore-imports = 'yes'
ignore-signatures = 'yes'
min-similarity-lines = 5

[tool.pylint.typecheck]
generated-members = 'REQUEST,acl_users,aq_parent'
ignore-mixin-members = 'yes'
ignored-classes = 'SQLObject'

[tool.pylint.variables]
additional-builtins = ''
dummy-variables-rgx = '_$|dummy'
ignored-argument-names = '_.*'
init-import = 'no'

[tool.pytest]
[tool.pytest.ini_options]
filterwarnings = ['ignore::DeprecationWarning']
testpaths = ['pi_portal']

[tool.yapf]
align_closing_bracket_with_visual_indent = false
based_on_style = 'google'
dedent_closing_brackets = true
force_multiline_dict = false
indent_width = 2
split_before_logical_operator = true
