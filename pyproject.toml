
[build-system]
  build-backend = "poetry.core.masonry.api"
  requires = ["poetry-core>=1.0.0"]

[tool]

  [tool.coverage]

    [tool.coverage.report]
      exclude_lines = ["no cover"]
      fail_under = 100
      ignore_errors = true
      precision = 1
      show_missing = true

    [tool.coverage.run]
      branch = true
      omit = ["*/test*", "setup.py", "pi_portal/modules/python/*.py"]
      source = ["."]

  [tool.isort]
    default_section = "FIRSTPARTY"
    include_trailing_comma = true
    indent = "    "
    length_sort = false
    line_length = 80
    multi_line_output = 3
    no_lines_before = "LOCALFOLDER"
    sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"
    skip_glob = "*_pb2.py"

  [tool.mypy]
    exclude = "^pi_portal\\/modules\\/python\\/.+\\.py$"
    ignore_missing_imports = false
    mypy_path = "pi_portal/stubs"

    [[tool.mypy.overrides]]
      ignore_missing_imports = true
      module = ["fake_rpi.*", "jsonschema.*", "RPi.*"]

  [tool.poetry]
    authors = ["Niall Byrne <niall@niallbyrne.ca>"]
    description = "Raspberry PI Door Logger"
    documentation = "https://github.com/pi-portal/pi_portal/README.md"
    exclude = ["**/tests/*", "**/*.sh"]
    homepage = "https://github.com/pi-portal/pi_portal"
    include = ["pi_portal/bin/*", "pi_portal/installation/**/*"]
    keywords = []
    license = "MPL-2.0"
    name = "pi_portal"
    readme = "README.md"
    repository = "https://github.com/pi-portal/pi_portal"
    version = "0.0.5"

    [tool.poetry.dependencies]
      Cython = "<3"
      boto3 = "^1.33.12"
      click = "^8.1.7"
      defusedxml = "^0.7.1"
      fake-rpi = "^0.7.1"
      humanize = "^4.0.0"
      jinja2 = "^3.1.2"
      jsonschema = ">=3.2.0,<4.0.0"
      python = ">=3.8,<4.0.0"
      python-json-logger = "<2.0.3"
      requests = "^2.31.0"
      slack-bolt = "^1.18.1"
      slack-sdk = "^3.26.0"

      [tool.poetry.dependencies."RPi.GPIO"]
        platform = "linux"
        version = "^0.7.1"

      [tool.poetry.dependencies.adafruit-circuitpython-dht]
        platform = "linux"
        version = "^4.0.1"

    [tool.poetry.dev-dependencies]
      bandit = "^1.7.4"
      commitizen = "^2.37.0"
      coverage = "^7.0.0"
      darglint2 = "^1.8.2"
      freezegun = "^1.2.0"
      isort = "^5.10.1"
      mypy = "^1.7.1"
      pydocstyle = "^6.3.0"
      pylint = "^3.0.3"
      pytest = "^7.2.0"
      pytest-pylint = "^0.21.0"
      safety = "^2.3.1"
      sphinx = "^7.0.0"
      sphinx-autodoc-typehints = "^1.25.0"
      sphinx-autopackagesummary = "^1.3"
      sphinx-click = "^5.1.0"
      sphinx-jsonschema = "^1.19.1"
      toml = "^0.10.2"
      types-boto3 = "^1.0.2"
      types-freezegun = "^1.1.10"
      types-pkg-resources = "^0.1.3"
      types-requests = "^2.31.0"
      wheel = "^0.42.0"
      yamllint = "^1.33.0"
      yapf = "^0.32.0"

    [[tool.poetry.packages]]
      include = "pi_portal"

    [tool.poetry.scripts]
      pi_portal = "pi_portal.cli:cli"

  [tool.pylint]

    [tool.pylint.basic]
      argument-rgx = "[a-z_][a-z0-9_]{1,40}$"
      attr-rgx = "[a-z_][a-z0-9_]{2,30}$"
      bad-names = "foo,bar,baz,toto,tutu,tata"
      class-attribute-rgx = "([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"
      class-rgx = "[A-Z_][a-zA-Z0-9]+$"
      const-rgx = "(([A-Z_][A-Z0-9_]*)|(__.*__))$|^urls$|^app$|^User$|^router$"
      docstring-min-length = "-1"
      function-rgx = "[A-Za-z_][A-Za-z0-9_]{2,40}$"
      good-names = "i,j,k,ex,Run,_"
      inlinevar-rgx = "[A-Za-z_][A-Za-z0-9_]*$"
      method-rgx = "^[A-Za-z_][A-Za-z0-9_]{2,40}$|^test_[A-Za-z_][A-Za-z0-9_]{2,70}$"
      module-rgx = "(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
      no-docstring-rgx = ".*"
      variable-rgx = "[a-z_][a-z0-9_]{2,30}$|^pk$"

    [tool.pylint.classes]
      defining-attr-methods = "__init__,__new__,setUp"
      valid-classmethod-first-arg = "cls"
      valid-metaclass-classmethod-first-arg = "mcs"

    [tool.pylint.design]
      max-args = 6
      max-attributes = 8
      max-branches = 12
      max-locals = 15
      max-parents = 10
      max-public-methods = 200
      max-returns = 6
      max-statements = 50
      min-public-methods = 2

    [tool.pylint.exceptions]
      overgeneral-exceptions = "builtins.Exception"

    [tool.pylint.format]
      ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
      indent-string = "  "
      max-line-length = 80
      max-module-lines = 1000
      single-line-if-stmt = "no"

    [tool.pylint.imports]
      deprecated-modules = "regsub,TERMIOS,Bastion,rexec"
      ext-import-graph = ""
      import-graph = ""
      int-import-graph = ""

    [tool.pylint.master]
      ignore = ""
      ignore-patterns = ".*_pb2.py"
      load-plugins = ""
      persistent = "yes"

    [tool.pylint.message_control]
      disable = "locally-disabled,fixme,too-few-public-methods,C0411,E1101"

    [tool.pylint.miscellaneous]
      notes = "FIXME,XXX,TODO"

    [tool.pylint.reports]
      evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
      output-format = "text"
      reports = "no"

    [tool.pylint.similarities]
      ignore-comments = "yes"
      ignore-docstrings = "yes"
      ignore-imports = "yes"
      min-similarity-lines = 5

    [tool.pylint.typecheck]
      generated-members = "REQUEST,acl_users,aq_parent"
      ignore-mixin-members = "yes"
      ignored-classes = "SQLObject"

    [tool.pylint.variables]
      additional-builtins = ""
      dummy-variables-rgx = "_$|dummy"
      ignored-argument-names = "_.*"
      init-import = "no"

  [tool.pytest]

    [tool.pytest.ini_options]
      testpaths = ["pi_portal"]
